#!/usr/bin/python3

import os, sys, json, getpass, shutil
import xml.dom.minidom
from urllib.parse import quote, unquote

def url_encode(url):
    return quote(url)

def url_decode(url):
    return unquote(url)

def dir_exists(path):
    return os.path.exists(path)

def ls(username, password, path):
    res = os.popen(
        'curl -s --user "{user}:{password}" --request PROPFIND https://dav.jianguoyun.com/dav/{path}'
        .format(user = username, password = password, path = path)
    ).read()

    DomTree = xml.dom.minidom.parseString(res)
    responses = DomTree.documentElement.childNodes
    directorys = []
    files = []
    for response in responses:
        if response.getElementsByTagName('d:getcontenttype')[0].childNodes[0].data == 'httpd/unix-directory':
            directorys.append(response.getElementsByTagName('d:displayname')[0].childNodes[0].data)
        else:
            files.append(response.getElementsByTagName('d:displayname')[0].childNodes[0].data)
    return {
        'directorys': directorys,
        'files': files
    }

def mkdir(username, password, path):
    try:
        os.system(
            'curl -s --user "{username}:{password}" --request MKCOL https://dav.jianguoyun.com/dav/{path}'
            .format(username = username, password = password, path = path)
        )
        print('Successful to make directory {}'.format(path))
    except Exception as e:
        print('Faild to make directory {}'.format(path))

def rm(username, password, path):
    try:
        os.system(
            'curl -s --user "{username}:{password}" --request DELETE https://dav.jianguoyun.com/dav/{path}'
            .format(username = username, password = password, path = path)
        )
        print('Successful to remove {}'.format(path))
    except Exception:
        print('Faild to remove {}'.format(path))

def pull(username, password, remote_path, local_path):
    cache_path = None
    if '.nutstore_ignore' in os.listdir(local_path):
        with open('{}/.nutstore_ignore'.format(local_path), 'r') as f:
            cache_path = f.read()
    if cache_path != url_decode(remote_path):
        if len(os.listdir(local_path)) != 0:
            validate_clare = input(
'''Continuing to pull will clear all files in this directory.
Do you want to continue? [Y/n] ''')
            if validate_clare == 'Y' or validate_clare.replace(' ', '') == '':
                for i in os.listdir(local_path):
                    if os.path.isdir('{}/{}'.format(local_path, i)):
                        shutil.rmtree('{}/{}'.format(local_path, i))
                    else:
                        os.remove('{}/{}'.format(local_path, i))
            else:
                print('Stop pulling')
                return
    directorys, files = ls(username, password, remote_path).values()
    for directory in directorys[1:]:
        if not dir_exists('{}/{}'.format(local_path, directory)):
            print('Make directory {directory}'.format(directory = directory))
            os.mkdir('{}/{}'.format(local_path, directory))
        pull(username, password, '{}/{}'.format(remote_path, url_encode(directory)), '{}/{}'.format(local_path, directory))
    for file in files:
        print('Downloading {file}'.format(file = file))
        os.system(
            'curl --user "{username}:{password}" --request GET https://dav.jianguoyun.com/dav/{remote_path} --output {local_path}/{file}'
            .format(username = username, password = password, remote_path = remote_path, local_path = local_path, file = file)
        )
    with open('{}/.nutstore_ignore'.format(local_path), 'w') as f:
        f.write(url_decode(remote_path))

def push(username, password, remote_path, local_path):
    if '.nutstore_ignore' not in os.listdir(local_path):
        print('{} is not Nutstore synchronize directory'.format(local_path))
        return
    for root, dirs, files in os.walk(local_path):
        now_path = '{remote_path}{root_path}'.format(
            remote_path = remote_path,
            root_path = url_encode(root.replace(local_path, ''))
        )
        ds, fs = ls(username, password, now_path).values()
        for dir in dirs:
            if dir not in ds:
                mkdir(username, password, '{}/{}'.format(now_path, dir))
        for d in ds[1:]:
            if d not in dirs:
                rm(username, password, '{}/{}'.format(now_path, d))
        for file in files:
            if file == '.nutstore_ignore':
                continue
            if file not in fs:
                print(
                    'curl --user "{username}:{password}" --request PUT https://dav.jianguoyun.com/dav/{now_path}/{file} --data @{root}/{file}'
                    .format(
                        username=username,
                        password=password,
                        now_path=now_path,
                        file=file,
                        root=root
                    )
                )
                os.system(
                    'curl --user "{username}:{password}" --request PUT https://dav.jianguoyun.com/dav/{now_path} --data @{root}/{file}'
                    .format(
                        username = username,
                        password = password,
                        now_path = now_path,
                        file = file,
                        root = root
                    )
                )
        for f in fs:
            if f not in files:
                rm(username, password, '{}/{}'.format(now_path, f))

def help():
    print(
'''
    Nutstore CLI a command line tool in Linux.

    Usage:
        Nutstore [ actions ] { params... }

    actions:
        ls              ls { remote_path }                      Print out the file directory in remote path.
        mkdir           mkdir { remote_path }                   Create directory in remote path.
        rm              rm { remote_path }                      Remove directory or file in remote path.
        pull            pull { remote_path } { local_path }     Pull directory and file to local path from remote path.
        push            push { remote_path } { local_path }     Push directory and file to remote path from local path.
'''
    )

def main():
    root = os.popen('echo ~').read().replace('\n', '')
    config_path = '{root}/.nutstore/config.json'.format(root = root)
    if dir_exists(config_path):
        with open(config_path, 'r') as f:
            config = json.loads(f.read())
            username = config['username']
            password = config['password']
    else:
        username = input('Username: ')
        password = getpass.getpass('Password: ')
        config = {}
        config['username'] = username
        config['password'] = password
        with open(config_path, 'w') as f:
            json.dump(config, f)
    
    action = sys.argv[1]
    if action == 'ls':
        directorys, files = ls(username, password, url_encode(sys.argv[2][1:])).values()
        print('Directorys:')
        for directory in directorys[1:]:
            print('- {}/'.format(directory))
        print('')
        print('Files:')
        for f in files:
            print('- {}'.format(f))
        print('')
    if action == 'mkdir':
        mkdir(username, password, url_encode(sys.argv[2][1:]))
    if action == 'pull':
        pull(username, password, url_encode(sys.argv[2][1:]), sys.argv[3])
    if action == 'push':
        push(username, password, url_encode(sys.argv[2][1:]), sys.argv[3])
    if action == 'rm':
        rm(username, password, url_encode(sys.argv[2][1:]))

if __name__ == '__main__':
    main()
